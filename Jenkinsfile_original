pipeline {
    agent any
    tools {
        maven "maven3.8.1"
    }
    stages {
        stage('Build') {
            steps {
                echo 'THis is Build step'
                git branch: 'develop', credentialsId: 'GithubCredentials', url: 'https://github.com/sdakinedi/time-tracker.git'
            }
        }
		
		stage('Compile') {
            steps {
                 echo 'This will Compile'
                 sh 'mvn clean compile'
            }
        }
		
		stage('Package') {
            steps {
                echo 'This will Package'
                 sh 'mvn package checkstyle:checkstyle findbugs:findbugs pmd:pmd'
                 archiveArtifacts artifacts: '**/*.war', followSymlinks: false
            }
        }
		
		
		stage('Static Analysis using Warning plugin') {
            steps {
                echo 'This will run Static Analysis'
                 recordIssues healthy: 20, qualityGates: [[threshold: 100, type: 'TOTAL', unstable: false], [threshold: 50, type: 'TOTAL', unstable: true]], tools: [findBugs(useRankAsPriority: true), checkStyle(), pmdParser()], unhealthy: 80
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'This will test'
                 sh 'mvn test'
            }
        }  
        stage('Results') {
            steps {
                echo 'This will show Results'
                 junit '**/*.xml'
                 
            }
        }
		
		stage('Copy Artifacts and Dockerfile to Dockerhost') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'DockerHost', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'Dockerfile')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])



				sshPublisher(publishers: [sshPublisherDesc(configName: 'DockerHost', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'web/target', sourceFiles: 'web/target/webapp-0.5.0-SNAPSHOT.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])

                 
            }
        }
		
		stage('Build Docker-tomcat image and push to Repo') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'DockerHost', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''cd /opt/docker;
				docker build -t mytomcat:1.0 .
				docker images;
				docker tag mytomcat:1.0 satyaprasad3186/mytomcat:1.0
				docker push satyaprasad3186/mytomcat:1.0''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])

                 
            }
        }
		
		stage('Pull from Docker Registry and run TOMCAT CONTAINER') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'DockerHost', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''docker pull satyaprasad3186/mytomcat:1.0 ;
				docker run -d  -p 8090:8080 satyaprasad3186/mytomcat:1.0 ;''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])                
            }
        }

    }
}
